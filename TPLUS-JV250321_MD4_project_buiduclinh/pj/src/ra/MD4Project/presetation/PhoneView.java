package ra.MD4Project.presetation;

import ra.MD4Project.Model.Phone;
import ra.MD4Project.Validate.ValidateInput;
import ra.MD4Project.business.IPhoneService;
import ra.MD4Project.business.impl.PhoneServiceImpl;

import java.util.List;
import java.util.Scanner;

public class PhoneView {
    private static final Scanner scanner = new Scanner(System.in);
    private static final IPhoneService phoneService = new PhoneServiceImpl();

    public static void PhoneViewPresentation() {
        boolean exit = false;
        do {
            System.out.println("============== QU·∫¢N L√ù S·∫¢N PH·∫®M ==============");
            System.out.println("1. Hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m");
            System.out.println("2. Th√™m m·ªõi s·∫£n ph·∫©m");
            System.out.println("3. C·∫≠p nh·∫≠t th√¥ng tin s·∫£n ph·∫©m");
            System.out.println("4. X√≥a s·∫£n ph·∫©m theo ID");
            System.out.println("5. T√¨m ki·∫øm theo Brand");
            System.out.println("6. T√¨m ki·∫øm theo kho·∫£ng gi√°");
            System.out.println("7. T√¨m ki·∫øm theo t·ªìn kho");
            System.out.println("8. Tho√°t");
            System.out.print("Ch·ªçn ch·ª©c nƒÉng (1-8): ");

            String choice = scanner.nextLine();

            if (ValidateInput.isInt(choice)) {
                int option = Integer.parseInt(choice);

                switch (option) {
                    case 1:
                        displayProducts();
                        break;
                    case 2:
                        addProduct();
                        break;
                    case 3:
                        updateProduct();
                        break;
                    case 4:
                        deleteProduct();
                        break;
                    case 5:
                        findProductByBrand();
                        break;
                    case 6:
                        findProductByPrice();
                        break;
                    case 7:
                        findProductByStock();
                        break;
                    case 8:
                        System.out.println("Tho√°t ch∆∞∆°ng tr√¨nh. Tr·ªü l·∫°i Menu Ch√≠nh!");
                        exit = true;
                        break;
                    default:
                        System.err.println("Vui l√≤ng ch·ªçn s·ªë t·ª´ 1 ƒë·∫øn 8!");
                }
            } else {
                System.err.println("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Nh·∫≠p s·ªë t·ª´ 1 ƒë·∫øn 8!");
            }

        } while (!exit);
    }

    private static void displayProducts() {
        List<Phone> products = phoneService.displayProduct();
        if (products.isEmpty()) {
            System.out.println("üì≠ Kh√¥ng c√≥ s·∫£n ph·∫©m n√†o trong danh s√°ch.");
        } else {
            products.forEach(System.out::println);
        }
    }

    private static void addProduct() {
        Phone phone = new Phone();
        phone.inputData(scanner);

        boolean result = phoneService.addProduct(phone);
        if (result) {
            System.out.println("Th√™m s·∫£n ph·∫©m th√†nh c√¥ng!");
        } else {
            System.err.println("Th√™m s·∫£n ph·∫©m th·∫•t b·∫°i!");
        }
    }

    private static void updateProduct() {
        boolean backToPhoneServiceMenu = false;
        Phone product = new Phone();
        try {
            int inputId = product.inputId(scanner);
            Phone productIsExist = phoneService.findProductById(inputId);
            if (productIsExist == null) {
                System.err.println("Id kh√¥ng t·ªìn t·∫°i!");
            } else {
                System.out.println(productIsExist);
                do {
                    System.out.println("************** C·∫≠p nh·∫≠t s·∫£n ph·∫©m **************");
                    System.out.println("1. C·∫≠p nh·∫≠t t√™n s·∫£n ph·∫©m");
                    System.out.println("2. C·∫≠p nh·∫≠t nh√£n s·∫£n ph·∫©m");
                    System.out.println("3. C·∫≠p nh·∫≠t gi√° s·∫£n ph·∫©m");
                    System.out.println("4. C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng t·ªìn kho");
                    System.out.println("5. Tr·ªü l·∫°i danh m·ª•c d·ªãch v·ª• ƒëi·ªán tho·∫°i.");
                    int choiceValue;
                    String choice;
                    try {
                        choice = scanner.nextLine();
                        if (ValidateInput.isInt(choice)) {
                            choiceValue = Integer.parseInt(choice);
                            switch (choiceValue) {
                                case 1:
                                    product.inputName(scanner);
                                    break;
                                case 2:
                                    product.inputBrand(scanner);
                                    break;
                                case 3:
                                    product.inputPrice(scanner);
                                    break;
                                case 4:
                                    product.inputStock(scanner);
                                    break;
                                case 5:
                                    backToPhoneServiceMenu = true;
                                    break;
                                default:
                                    System.err.println("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá vui l√≤ng nh·∫≠p l·∫°i!");
                            }
                        } else {
                            System.err.println("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá vui l√≤ng nh·∫≠p l·∫°i!");
                        }
                    } catch (RuntimeException e) {
                        throw new RuntimeException(e);
                    }
                } while (!backToPhoneServiceMenu);
            }
            boolean result = phoneService.updateProduct(product);
            if (result) {
                System.out.println("C·∫≠p nh·∫≠t th√†nh c√¥ng s·∫£n ph·∫©m!");
            } else {
                System.out.println("C·∫≠p nh·∫≠t kh√¥ng th√†nh c√¥ng!");
            }
        } catch (RuntimeException e) {
            throw new RuntimeException(e);
        }

    }

    private static void deleteProduct() {
        System.out.print("Nh·∫≠p ID s·∫£n ph·∫©m c·∫ßn x√≥a: ");
        String inputId = scanner.nextLine();

        if (ValidateInput.isInt(inputId)) {
            int id = Integer.parseInt(inputId);
            Phone existingProduct = phoneService.findProductById(id);

            if (existingProduct == null) {
                System.err.println("S·∫£n ph·∫©m v·ªõi ID " + id + " kh√¥ng t·ªìn t·∫°i.");
                return;
            }

            System.out.print("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a s·∫£n ph·∫©m n√†y? (y/n): ");
            String confirm = scanner.nextLine();
            if (confirm.equalsIgnoreCase("y")) {
                boolean result = phoneService.deleteProduct(id);
                if (result) {
                    System.out.println("X√≥a s·∫£n ph·∫©m th√†nh c√¥ng!");
                } else {
                    System.err.println("X√≥a s·∫£n ph·∫©m th·∫•t b·∫°i!");
                }
            } else {
                System.out.println("ƒê√£ h·ªßy x√≥a s·∫£n ph·∫©m.");
            }

        } else {
            System.err.println("ID ph·∫£i l√† s·ªë nguy√™n h·ª£p l·ªá!");
        }
    }

    private static void findProductByBrand() {
        System.out.print("Nh·∫≠p brand c·∫ßn t√¨m ki·∫øm: ");
        String brand = scanner.nextLine();

        if (ValidateInput.isEmpty(brand)) {
            System.err.println("Brand kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.");
        } else {
            List<Phone> products = phoneService.displayProductByBrand(brand);
            if (products.isEmpty()) {
                System.out.println("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o v·ªõi brand n√†y.");
            } else {
                products.forEach(System.out::println);
            }
        }
    }

    private static void findProductByPrice() {
        System.out.print("Nh·∫≠p kho·∫£ng gi√° (gi√° th·∫•p nh·∫•t): ");
        String priceMinStr = scanner.nextLine();
        System.out.print("Nh·∫≠p kho·∫£ng gi√° (gi√° cao nh·∫•t): ");
        String priceMaxStr = scanner.nextLine();

        if (ValidateInput.isFloat(priceMinStr) && ValidateInput.isFloat(priceMaxStr)) {
            float priceMin = Float.parseFloat(priceMinStr);
            float priceMax = Float.parseFloat(priceMaxStr);

            List<Phone> products = phoneService.displayProductByPrice(priceMin, priceMax);
            if (products.isEmpty()) {
                System.out.println("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o trong kho·∫£ng gi√° n√†y.");
            } else {
                products.forEach(System.out::println);
            }
        } else {
            System.err.println("Gi√° nh·∫≠p v√†o kh√¥ng h·ª£p l·ªá.");
        }
    }

    private static void findProductByStock() {
        System.out.print("Nh·∫≠p t·ªìn kho t·ªëi thi·ªÉu: ");
        String stockMinStr = scanner.nextLine();
        System.out.print("Nh·∫≠p t·ªìn kho t·ªëi ƒëa: ");
        String stockMaxStr = scanner.nextLine();

        if (ValidateInput.isInt(stockMinStr) && ValidateInput.isInt(stockMaxStr)) {
            int stockMin = Integer.parseInt(stockMinStr);
            int stockMax = Integer.parseInt(stockMaxStr);

            List<Phone> products = phoneService.displayProductByStock(stockMin, stockMax);
            if (products.isEmpty()) {
                System.out.println("Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o trong kho·∫£ng t·ªìn kho n√†y.");
            } else {
                products.forEach(System.out::println);
            }
        } else {
            System.err.println("T·ªìn kho nh·∫≠p v√†o kh√¥ng h·ª£p l·ªá.");
        }
    }
}